apply plugin: 'com.android.application'
apply plugin: 'maven'
apply from: rootProject.getRootDir().getAbsolutePath() + '/myUtil.gradle'
getAndroidVersion()
println utilName

afterEvaluate {
    println '******************* this is the msg from afterEvaluate'
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.example.administrator.mytestallhere"

        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [testM: "release"]
        }
        debug {
            manifestPlaceholders = [testM: "debug"]
        }
//        myBuildType {
//
//        }
    }


   // flavorDimensions 'first','seconed'

    // config  variant features
    productFlavors {
        myray {
            //dimension 'seconed'
            applicationId 'mybase.com.example.administrator.mytestallhere'
        }
        treasure {
           // dimension 'first'
            applicationId 'treasure.com.example.administrator.mytestallhere'
        }
    }

//    splits {
//
//    }

    variantFilter{

    }

    sourceSets{
        //maybe only the 'main' script block is workful
//        myrayDebug{
//            java.srcDirs=['main/java','mybase/java']
//        }
        main{
            java.srcDirs=['src/main/java','src/mybase/java']//!!!!! not like follows : main/java....mybase/java.....
        }
    }
}

repositories {
    //本地仓库
    flatDir {
        dirs 'libs', '../mylibrary/libs'// aar目录
    }
}



dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile(name: 'ultra_lib-1.0.11', ext: 'aar')
    //arr依赖不传递
    //arr依赖不传递
    compile(name: 'calendar-release-1.0', ext: 'aar')
    //引用本地aar
//    compile 'org.greenrobot:eventbus:3.0.0'
//    compile 'com.github.bumptech.glide:glide:4.0.0-RC1'
//    compile 'com.android.support:appcompat-v7:25.3.1'
//    compile 'com.android.support.constraint:constraint-layout:1.0.2'
//    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
//    compile 'com.jakewharton.rxbinding2:rxbinding-support-v4:2.0.0'
//    compile 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'
//    compile 'com.jakewharton.rxbinding2:rxbinding-design:2.0.0'
//    compile 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0'
//    compile 'com.jakewharton.rxbinding2:rxbinding-leanback-v17:2.0.0'
//    compile 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'
//    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0-RC1'

    //butterknife 在子工程里依赖比较麻烦
    //myrayCompile 'com.jakewharton:butterknife:8.8.0'      //注意这里是只有选择myray的productFlavor才会用这个依赖
    compile 'com.jakewharton:butterknife:8.8.0'
    //treasureCompile project(':mylibrary')                   //这里也是
    compile project(':mylibrary')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0'

}


class MyClass {
    String myname

    void setName(s) {
        myname = s
    }

    void setClosure(Closure closure) {
        closure(myname)
    }

    void setname(s) {
        myname = s
    }


}

task testMyClass {
    def mClass = new MyClass()
    doLast {
        mClass.myName 'hh'
        println mClass.myname
    }
}
uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://localhost/tmp/myRepo/"
        }
    }
}

sourceSets.all {
    ext.purpose = null
    println 'sourceSets :    ' + it.name
}

sourceSets {
    main {
        purpose = 'main'
    }
    test {
        purpose = 'test'
    }
    belove {
        purpose = 'belove'
    }
}

task testSourceSets << {
    sourceSets.matching { it.purpose == 'belove' }.each { println '--' + it.name }
    configure()
}
